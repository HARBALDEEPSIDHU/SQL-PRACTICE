**Data Science Skills

SELECT CANDIDATE_ID
FROM CANDIDATES
WHERE SKILL IN ('Python', 'Tableau' , 'PostgreSQL')
GROUP BY CANDIDATE_ID
HAVING COUNT(SKILL)= 3
ORDER BY CANDIDATE_ID;

**Page With No Likes

SELECT PAGES.PAGE_ID
FROM PAGES
LEFT OUTER JOIN PAGE_LIKES
ON PAGES.PAGE_ID = PAGE_LIKES.PAGE_ID
WHERE PAGE_LIKES.PAGE_ID IS NULL;

**Unfinished Parts
SELECT DISTINCT PART
FROM PARTS_ASSEMBLY 
WHERE FINISH_DATE IS NULL;

**Laptop vs. Mobile Viewership

SELECT 
SUM(CASE WHEN DEVICE_TYPE = 'laptop' THEN 1 ELSE 0 END) AS LAPTOP_VIEWS,
SUM(CASE WHEN DEVICE_TYPE IN ('phone' , 'tablet') THEN 1 ELSE 0 END) AS MOBILE_VIEWS
FROM VIEWERSHIP;

**Cities With Completed Trades

SELECT 
USERS.CITY,
COUNT(TRADES.ORDER_ID) AS TOTAL_ORDERS
FROM TRADES LEFT JOIN USERS ON
USERS.USER_ID = TRADES.USER_ID
WHERE TRADES.STATUS = 'Completed'
GROUP BY USERS.CITY 
ORDER BY TOTAL_ORDERS DESC
LIMIT 3;

**Duplicate Job Listings

COUNT(DISTINCT (COMPANY_ID )) AS co_w_duplicate_jobs
FROM
(SELECT COMPANY_ID, TITLE, DESCRIPTION, 
COUNT(JOB_ID) AS JOB_COUNT 
FROM JOB_LISTINGS
GROUP BY COMPANY_ID, TITLE, DESCRIPTION) AS JOBS_GROUPED
WHERE JOB_COUNT>1;


**Final Account Balance

SELECT
ACCOUNT_ID ,
 SUM(CASE WHEN TRANSACTION_TYPE = 'Deposit' THEN AMOUNT ELSE -AMOUNT END) 
AS FINAL_BALANCE
FROM TRANSACTIONS
GROUP BY ACCOUNT_ID;

**Histogram of Tweets

SELECT
TWEETS_NUM AS TWEET_BUCKET,
COUNT(USER_ID) AS USER_NUM
FROM(
SELECT 
USER_ID,
COUNT(TWEET_ID) AS TWEETS_NUM
FROM TWEETS
WHERE TWEET_DATE BETWEEN '2022-01-01' AND '2022-12-31' 
GROUP BY USER_ID
)
AS TOTAL_TWEETS
GROUP BY TWEETS_NUM;

**Average Review Ratings

SELECT 
EXTRACT(MONTH FROM SUBMIT_DATE) AS MTH,
 PRODUCT_ID,
ROUND(AVG(STARS), 2) AS AVG_STARS
FROM REVIEWS
GROUP BY EXTRACT(MONTH FROM SUBMIT_DATE) , PRODUCT_ID
ORDER BY MTH , PRODUCT_ID;

**LinkedIn Power Creators (Part 1)

SELECT  PP.PROFILE_ID
FROM PERSONAL_PROFILES AS PP
JOIN COMPANY_PAGES AS CP
ON PP.EMPLOYER_ID = CP.COMPANY_ID
WHERE PP.FOLLOWERS > CP.FOLLOWERS
ORDER BY PP.PROFILE_ID;
